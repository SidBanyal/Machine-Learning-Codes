import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_digits
%matplotlib inline

#Instantiate the object
hw=load_digits()

#Glance thorugh the data
hw.data
hw.data[0]

#Plotting a digits
plt.gray()
hw.images[1]
plt.matshow(hw.images[1])

#Loading the Data Frame
df=pd.DataFrame(hw.data)

#Viewing the dataframe df
df.head()

#inserting the Target Column
Target=pd.DataFrame(hw.target,columns=['Target'])
df= pd.concat([df,Target],axis=1)

#Viewing the updated Data Frame
df.head()

#Now our data has been processed, we can proceed to splitting the data into training and Splitting Phase 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(df.drop(['Target'],axis=1),df['Target'],test_size=0.2,random_state=42)

from sklearn.svm import SVC
svm_learn= SVC()

svm_learn.fit(X_train,y_train)

predictions=svm_learn.predict(x_test)

svm_learn.score(x_test,y_test)


from sklearn.metrics import confusion_matrix
confuse_mat=confusion_matrix(y_test,predictions)

#Heat Map

plt.figure(figsize=(10,7))
sns.heatmap(confuse_mat,annot= True)
plt.xlabel('Predction')
plt.ylabel('Actual Value')


#So as we can see the heatmap, it displays our predctions are terribly wrong we need to Tune parameters like 1. Regularization (C), 2.Gamma or 3. Kernel

#finding the best C
cap =[]
for i in range(1,50):
    svm_learn =SVC(C=i)
    svm_learn.fit(X_train,y_train)
    predcitions= svm_learn.predict(X_test)
    cap.append(svm_learn.score(X_test, y_test))
print(cap)

print(cap)
#Insight:Increasing C value will not make our model Better! So we should Focus on other Parameters

#Using Kernel Apporach we may find a better Score(Already tried for Gamma it was very poor)
svm_learn= SVC(kernel='linear')
svm_learn.fit(X_train,y_train)
predictions=svm_learn.predict(x_test)
svm_learn.score(x_test,y_test) #Voila!

from sklearn.metrics import confusion_matrix
confuse_mat=confusion_matrix(y_test,predictions)

#Heat Map

plt.figure(figsize=(10,7))
sns.heatmap(confuse_mat,annot= True)
plt.xlabel('Predction')
plt.ylabel('Actual Value')
#Insight: Preety Good Predctions!
